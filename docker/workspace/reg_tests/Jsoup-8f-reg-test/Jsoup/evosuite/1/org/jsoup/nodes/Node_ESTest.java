/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 18 06:43:52 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("A.", "A.");
      textNode0.setBaseUri("A.");
      assertEquals("A.", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(")", "");
      Node node0 = textNode0.attr("\n", "xi");
      assertSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:!1t/6}", "abs:!1t/6}");
      Node node0 = textNode0.removeAttr("abs:!1t/6}");
      assertEquals("abs:!1t/6}", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("xi");
      Element element0 = document0.prepend("");
      element0.parentNode = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("xi", "ynCgPbJLZxez8x.(");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, dataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("@A.", "@A.");
      Document document0 = Document.createShell("@A.");
      // Undeclared exception!
      try { 
        textNode0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("}V", "}V");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("xi", "ynCgPbJLZxez8x.(");
      dataNode0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("?v0^=");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("5@c4P4L", "5@c4P4L");
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("@A.", "@A.");
      textNode0.attributes();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:!1t/6}", "abs:!1t/6}");
      textNode0.absUrl("abs:!1t/6}");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("[Va*,]g'aL[E_");
      Element element0 = document0.prepend("");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.setParentNode(element0.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("3");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("}V");
      Element element0 = document0.prependElement("}V");
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("@A.", "@A.");
      Document document0 = new Document("@A.");
      // Undeclared exception!
      try { 
        textNode0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("xi");
      Element element0 = document0.prepend("");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("[Va*,]g'aL[E_");
      Element element0 = document0.prepend("");
      element0.parentNode = (Node) document0;
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("xi");
      Document document1 = document0.normalise();
      document1.appendChild(document1);
      document1.previousSibling();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:!1t/6}", "abs:!1t/6}");
      textNode0.equals("abs:!1t/6}");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      textNode0.equals(textNode0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("P");
      TextNode textNode0 = new TextNode("P", "");
      textNode0.setParentNode(document0);
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:!1t/6}", "abs:!1t/6}");
      textNode0.toString();
  }
}
