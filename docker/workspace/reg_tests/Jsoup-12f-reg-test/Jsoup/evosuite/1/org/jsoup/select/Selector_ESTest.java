/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 18 06:55:52 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("e|~[,7f={:f");
      Elements elements0 = Selector.select("e|~[,7f={:f", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(":eq(");
      // Undeclared exception!
      try { 
        Selector.select(":eq(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("CsP*0'2K P&J*n3)dLw");
      // Undeclared exception!
      try { 
        Selector.select("CsP*0'2K P&J*n3)dLw", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'CsP*0'2K P&J*n3)dLw': unexpected token at ''2K P&J*n3)dLw'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(":has(el) subselect must not be empty");
      Selector.select(":has(el) subselect must not be empty", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("eO~[,7f=Q@:");
      // Undeclared exception!
      try { 
        Selector.select(":not(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :not(selector) subselect must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        Selector.select(".", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(":matches(r.gex) query must not be empty");
      // Undeclared exception!
      try { 
        Selector.select(":lt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell(":matches(r.gex) query must not be empty");
      // Undeclared exception!
      try { 
        Selector.select(":gt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document(":matches(r.gex) query must not be empty");
      // Undeclared exception!
      try { 
        Selector.select(">hLW3#jL\"oPXc|&", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'hLW3#jL\"oPXc|&': unexpected token at '\"oPXc|&'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("OPTION");
      Selector.select("qxrn,xuL8 D3", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell(":contains(ext) queryFmust not be emp+y");
      Selector.select(":contains(ext) queryFmust not be emp+y", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(",C\"sUPm+");
      // Undeclared exception!
      try { 
        Selector.select(",C\"sUPm+", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(":matches(regex) quer7 must no( bk empt?");
      Selector.select(":matches(regex) quer7 must no( bk empt?", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("G%uB\"9 ,k");
      // Undeclared exception!
      try { 
        Selector.select(":containsOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :contains(text) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell(":matchesOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":matchesOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :matches(regex) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell(" 2w6KzzkVN_pE[4f{*");
      Selector.select(" 2w6KzzkVN_pE[4f{*", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("OPTION");
      Selector.select("w7iQw4>u0j", (Element) document0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell(" 2w6KzzkVN_pE[4f{*");
      Elements elements0 = document0.getElementsByAttributeValueNot(" 2w6KzzkVN_pE[4f{*", " 2w6KzzkVN_pE[4f{*");
      Selector.filterOut(elements0, elements0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell(" 2w6KzzkVN_pE[4f{*");
      Elements elements0 = document0.getElementsByAttributeValueNot(" 2w6KzzkVN_pE[4f{*", " 2w6KzzkVN_pE[4f{*");
      Elements elements1 = document0.getElementsMatchingText("N5\"|Q/@+ZR");
      Selector.filterOut(elements0, elements1);
  }
}
