/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 25 02:58:47 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.URL;
import org.apache.commons.cli.PatternOptionBuilder;
import org.apache.commons.cli.TypeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeHandler_ESTest extends TypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = TypeHandler.createValue("Y{\"eA<", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      Object object1 = TypeHandler.createValue("", ((PatternOptionBuilder) object0).CLASS_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      Object object1 = TypeHandler.createValue("Y{\"eA<", ((PatternOptionBuilder) object0).FILES_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeHandler typeHandler0 = new TypeHandler();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = TypeHandler.createURL("`wmj]-<Pokmz`V@/&ij");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = TypeHandler.createValue("*HBC,fL", class0);
      assertEquals("*HBC,fL", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("Unable to find: ", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      Object object1 = TypeHandler.createValue("org.apache.commons.cli.PatternOptionBuilder", ((PatternOptionBuilder) object0).NUMBER_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      MockFile mockFile0 = (MockFile)TypeHandler.createValue("rRM9VyLA", ((PatternOptionBuilder) object0).FILE_VALUE);
      assertFalse(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      MockFile mockFile0 = (MockFile)TypeHandler.createValue("j2F:w\"DoJdR$%zDJ", ((PatternOptionBuilder) object0).EXISTING_FILE_VALUE);
      assertEquals("j2F:w\"DoJdR$%zDJ", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Number number0 = TypeHandler.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Number number0 = TypeHandler.createNumber("p(zc$_%~ZmjSR*:");
      assertNull(number0);
  }
}
