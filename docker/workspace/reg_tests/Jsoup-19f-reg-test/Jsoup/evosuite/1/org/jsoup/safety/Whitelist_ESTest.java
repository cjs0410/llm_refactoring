/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 18 07:22:54 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tbody";
      Whitelist whitelist1 = whitelist0.addAttributes("tbody", stringArray0);
      Document document0 = Document.createShell("tbody");
      Attribute attribute0 = new Attribute("tbody", "j.j2142ryx8V%");
      boolean boolean0 = whitelist1.isSafeAttribute("tbody", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("U`!||", "U`!||", "U`!||");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("U`!||", "strike", "}G:`%+yI`^");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("u");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "img";
      stringArray0[1] = "emsp13";
      stringArray0[2] = "img";
      whitelist0.addAttributes("img", stringArray0);
      Document document0 = Document.createShell("img");
      Attribute attribute0 = new Attribute("img", "img");
      boolean boolean0 = whitelist0.isSafeAttribute("img", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      whitelist0.addEnforcedAttribute("!bc~`(fr*lqt6d[^3", "!bc~`(fr*lqt6d[^3", "!bc~`(fr*lqt6d[^3");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("!bc~`(fr*lqt6d[^3");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.parser.Token$Character";
      stringArray0[1] = "org.jsoup.parser.Token$Character";
      stringArray0[2] = "org.jsoup.parser.Token$Character";
      stringArray0[3] = "org.jsoup.parser.Token$Character";
      stringArray0[4] = "org.jsoup.parser.Token$Character";
      stringArray0[5] = "org.jsoup.parser.Token$Character";
      Whitelist whitelist1 = whitelist0.addProtocols("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      boolean boolean0 = whitelist0.isSafeTag("{A/`Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.isSafeTag("strike");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = new Document("img");
      Attribute attribute0 = Attribute.createFromEncoded(">O#pjNH[QY'h)Bk", "Oobrk");
      whitelist0.isSafeAttribute("emsp13", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Attribute attribute0 = new Attribute("a", "q");
      Document document0 = Document.createShell("v(4~qpWc");
      whitelist0.isSafeAttribute("q", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("emsp13");
      whitelist_AttributeKey0.equals(whitelist_AttributeKey0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("Fg_mAb|'R$?{w}%");
      whitelist_TagName0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("img");
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("emsp13");
      whitelist_AttributeKey0.equals(document0);
  }
}
