static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    Document doc = null;
    if (charsetName == null) { // determine from meta. safe parse as UTF-8
        String docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
        if (meta != null) { // if not found, will keep utf-8 as best attempt
            String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                charsetName = foundCharset;
                byteData.rewind();
                doc = null;
                doc = parser.parseInput(getDocDataWithoutBOM(byteData, foundCharset), baseUri);
            }
        }
    } else { // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        String docData = Charset.forName(charsetName).decode(byteData).toString();
        doc = parser.parseInput(getDocDataWithoutBOM(byteData, charsetName), baseUri);
    }
    
    return doc;
}

private static String getDocDataWithoutBOM(ByteBuffer byteData, String charsetName) {
    String docData = Charset.forName(charsetName).decode(byteData).toString();
    if (docData.charAt(0) == 65279) {
        char[] charArray = new char[docData.length() - 1];
        docData.getChars(1, docData.length(), charArray, 0);
        docData = new String(charArray);
    }
    return docData;
}