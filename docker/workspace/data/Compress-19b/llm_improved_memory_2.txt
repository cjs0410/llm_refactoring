public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize,
                                        boolean hasRelativeHeaderOffset, boolean hasDiskStart)
        throws ZipException {
    if (rawCentralDirectoryData != null) {
        int minLength = (hasUncompressedSize ? WORD : 0)
                + (hasCompressedSize ? DWORD : 0)
                + (hasRelativeHeaderOffset ? DWORD : 0)
                + (hasDiskStart ? WORD : 0);

        if (rawCentralDirectoryData.length < minLength) {
            throw new ZipException("central directory zip64 extended"
                    + " information extra field's length"
                    + " doesn't match central directory"
                    + " data.  Expected length "
                    + minLength + " but is "
                    + rawCentralDirectoryData.length);
        }

        int offset = 0;

        if (hasUncompressedSize) {
            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasCompressedSize) {
            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasRelativeHeaderOffset) {
            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasDiskStart) {
            diskStart = new ZipLong(rawCentralDirectoryData, offset);
        }
    }
}