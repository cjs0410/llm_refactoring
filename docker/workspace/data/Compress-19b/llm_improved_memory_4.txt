public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                       boolean hasCompressedSize,
                                       boolean hasRelativeHeaderOffset,
                                       boolean hasDiskStart)
    throws ZipException {
    if (rawCentralDirectoryData != null) {
        int expectedLength = (hasUncompressedSize ? DWORD : 0)
            + (hasCompressedSize ? DWORD : 0)
            + (hasRelativeHeaderOffset ? DWORD : 0)
            + (hasDiskStart ? WORD : 0);
        
        if (rawCentralDirectoryData.length < expectedLength) {
            throw createZipException(expectedLength);
        }
        
        int offset = 0;
        if (hasUncompressedSize) {
            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasCompressedSize) {
            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasRelativeHeaderOffset) {
            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
            offset += DWORD;
        }
        if (hasDiskStart) {
            diskStart = new ZipLong(rawCentralDirectoryData, offset);
            offset += WORD;
        }
    }
}

private ZipException createZipException(int expectedLength) {
    StringBuilder errorMessage = new StringBuilder();
    errorMessage.append("central directory zip64 extended information extra field's length");
    errorMessage.append(" doesn't match central directory data. Expected length ");
    errorMessage.append(expectedLength);
    errorMessage.append(" but is ");
    errorMessage.append(rawCentralDirectoryData.length);
    
    return new ZipException(errorMessage.toString());
}