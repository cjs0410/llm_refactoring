public static long parseOctal(final byte[] buffer, final int offset, final int length) {
    long result = 0;

    if (length < 2) {
        throw new IllegalArgumentException("Length " + length + " must be at least 2");
    }

    if (buffer[offset] == 0) {
        return 0L;
    }

    int start = offset;
    int end = offset + length;

    // Skip leading spaces
    while (start < end && buffer[start] == ' ') {
        start++;
    }

    // Trim all trailing NULs and spaces.
    byte trailer = buffer[end - 1];
    while (start < end && (trailer == 0 || trailer == ' ')) {
        end--;
        trailer = buffer[end - 1];
    }

    for (int i = start; i < end; i++) {
        final byte currentByte = buffer[i];
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
        }
        result = (result << 3) + (currentByte - '0'); // convert from ASCII
    }

    return result;
}