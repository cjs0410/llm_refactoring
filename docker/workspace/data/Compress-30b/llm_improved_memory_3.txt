@Override
public int read(final byte[] dest, final int offs, final int len)
    throws IOException {
    if (offs < 0) {
        throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
    }
    if (len < 0) {
        throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
    }
    if (offs + len > dest.length) {
        throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                            + len + ") > dest.length(" + dest.length + ").");
    }

    // Check if the input stream is closed
    if (this.in == null) {
        throw new IOException("stream closed");
    }

    // Return 0 immediately if the length is zero
    if (len == 0) {
        return 0;
    }

    // Calculate the end index and set the destination offset
    final int endIndex = offs + len;
    int destOffs = offs;

    int b;
    while (destOffs < endIndex && ((b = read0()) >= 0)) {
        dest[destOffs++] = (byte) b;
        count(1);
    }

    int c = (destOffs == offs) ? -1 : (destOffs - offs);
    return c;
}