public static long parseOctal(byte[] buffer, int offset, int length) {
    long result = 0;
    int end = offset + length;

    if (length < 2) {
        throw new IllegalArgumentException("Length " + length + " must be at least 2");
    }

    if (buffer[offset] == 0) {
        return 0L;
    }

    // Skip leading spaces
    while (offset < end && buffer[offset] == ' ') {
        offset++;
    }

    // Must have trailing NUL or space
    if (buffer[end-1] == 0 || buffer[end-1] == ' ') {
        end--;
    } else {
        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end-1, buffer[end-1]));
    }
    
    // May have additional NULs or spaces
    byte trailer;
    while (offset < end - 1 && ((trailer = buffer[end - 1]) == 0 || trailer == ' ')) {
        end--;
    }

    for (int i = offset; i < end; i++) {
        byte currentByte = buffer[i];
        if (currentByte < '0' || currentByte > '7') {
            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
        }
        result = (result << 3) + (currentByte - '0'); // convert from ASCII
    }

    return result;
}