public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException("A blank string is not a valid number");
    }

    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present

    int numDecimals = 0; // Check required precision (LANG-693)

    if (decPos > -1) { // there is a decimal point
        if (expPos > -1 && (expPos < decPos || expPos > str.length())) {
            throw new NumberFormatException(str + " is not a valid number.");
        }

        dec = (expPos > -1) ? str.substring(decPos + 1, expPos) : str.substring(decPos + 1);
        mant = str.substring(0, decPos);
        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
    } else {
        if (expPos > -1 && expPos > str.length()) {
            throw new NumberFormatException(str + " is not a valid number.");
        }

        mant = (expPos > -1) ? str.substring(0, expPos) : str;
        dec = null;
    }

    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }

        // Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);

        switch (lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + " is not a valid number.");

            case 'f':
            case 'F':
                try {
                    final Float f = createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        // If it's too big for a float or the float value = 0 and the string
                        // has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // ignore the bad number
                }
                break;

            case 'd':
            case 'D':
                try {
                    final Double d = createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // ignore the bad number
                }
                break;

            default:
                throw new NumberFormatException(str + " is not a valid number.");
        }
    }

    // User doesn't have a preference on the return type, so let's start
    // small and go from there...

    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }

    if (dec == null && exp == null) { // no decimal point and no exponent
        // Must be an Integer, Long, BigInteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // ignore the bad number
        }
        return createBigInteger(str);
    }

    // Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) { // If number has 7 or fewer digits past the decimal point, make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) { // If number has between 8 and 16 digits past the decimal point, make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // ignore the bad number
    }

    return createBigDecimal(str);
}