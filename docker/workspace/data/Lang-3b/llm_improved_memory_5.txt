public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException("A blank string is not a valid number");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if(pfxLen > 0) { // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) { // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) { // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    // ... remaining code from the original method ...
    // ... keeping it intact ...

    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    Number result = null;
    try {
        if (numDecimals <= 7) {
            result = createFloat(str);
        }
    } catch (final NumberFormatException nfe) {
        // ignore the bad number
    }
    if (result == null) {
        try {
            if (numDecimals <= 16) {
                result = createDouble(str);
            }
        } catch (final NumberFormatException nfe) {
            // ignore the bad number
        }
    }
    if (result != null && !result.isInfinite() && (result.doubleValue() != 0.0D || allZeros)) {
        return result;
    }

    return createBigDecimal(str);
}