public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException("A blank string is not a valid number");
    }

    // Need to deal with all possible hex prefixes here
    final String[] hexPrefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
    int prefixLength = 0;
    for (final String prefix : hexPrefixes) {
        if (str.startsWith(prefix)) {
            prefixLength += prefix.length();
            break;
        }
    }

    if (prefixLength > 0) { // we have a hex number
        final int hexDigits = str.length() - prefixLength;
        if (hexDigits > 16) { // too many for Long
            return createBigInteger(str);
        } else if (hexDigits > 8) { // too many for Integer
            return createLong(str);
        } else {
            return createInteger(str);
        }
    }

    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;

    final int decPos = str.indexOf('.');
    final int expPos = str.toLowerCase(Locale.ROOT).indexOf('e') + 1; // assumes 'e' is not present

    int numDecimals = 0; // Check required precision
    if (decPos > -1) { // there is a decimal point
        if (expPos > decPos || expPos > str.length()) { // prevents IOOBE
            throw new NumberFormatException(str + " is not a valid number.");
        }
        dec = str.substring(decPos + 1, expPos);
        mant = str.substring(0, decPos);
        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
    } else {
        mant = expPos > -1 ? str.substring(0, expPos) : str;
        dec = null;
    }

    if (Character.isDigit(lastChar) || lastChar == '.') {
        // Parsing regular numbers
        if (dec == null && expPos > -1 && expPos < str.length()) {
            exp = str.substring(expPos);
        } else {
            exp = null;
        }

        if (dec == null && exp == null) { // no decimal point and no exponent
            try {
                return createInteger(str);
            } catch (final NumberFormatException nfe) {
                // ignore the bad number
            }
            try {
                return createLong(str);
            } catch (final NumberFormatException nfe) {
                // ignore the bad number
            }
            return createBigInteger(str);
        }

        // Must be a Float, Double, BigDecimal
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        try {
            if (numDecimals <= 7) { // If number has 7 or fewer digits past the decimal point then make it a float
                return new Float(str);
            }
        } catch (final NumberFormatException nfe) {
            // ignore the bad number
        }

        try {
            if (numDecimals <= 16) { // If number has between 8 and 16 digits past the decimal point then make it a double
                return new Double(str);
            }
        } catch (final NumberFormatException nfe) {
            // ignore the bad number
        }

        return new BigDecimal(str);
    }

    // User specified type
    final String numeric = str.substring(0, str.length() - 1);
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    switch (lastChar) {
        case 'l':
        case 'L':
            if ((dec == null && exp == null && isDigits(numeric))
                    || (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))) {
                try {
                    return createLong(numeric);
                } catch (final NumberFormatException nfe) {
                    // Too big for a long
                }
                return createBigInteger(numeric);
            }
            break;

        case 'f':
        case 'F':
            try {
                final Float f = createFloat(numeric);
                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                    return f;
                }
            } catch (final NumberFormatException nfe) {
                // ignore the bad number
            }
            break;

        case 'd':
        case 'D':
            try {
                final Double d = createDouble(numeric);
                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                    return d;
                }
            } catch (final NumberFormatException nfe) {
                // ignore the bad number
            }
            break;
    }

    throw new NumberFormatException(str + " is not a valid number.");
}