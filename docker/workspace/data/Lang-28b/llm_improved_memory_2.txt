 @Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    if (isNumericEntity(input, index)) {
        int start = index + 2;
        boolean isHex = determineNumericEntityBase(input, start);

        int end = findNumericEntityEnd(input, start);

        int entityValue = parseNumericEntityValue(input, start, end, isHex);

        if (isSupplementaryCharacter(entityValue)) {
            writeSupplementaryCharacter(entityValue, out);
        } else {
            out.write(entityValue);
        }

        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }

    return 0;
}

public boolean isNumericEntity(CharSequence input, int index) {
    return input.charAt(index) == '&' && input.charAt(index + 1) == '#';
}

public boolean determineNumericEntityBase(CharSequence input, int start) {
    char firstChar = input.charAt(start);
    return firstChar == 'x' || firstChar == 'X';
}

public int findNumericEntityEnd(CharSequence input, int start) {
    int end = start;
    while (input.charAt(end) != ';') {
        end++;
    }
    return end;
}

public int parseNumericEntityValue(CharSequence input, int start, int end, boolean isHex) {
    int entityValue;
    try {
        String entityStr = input.subSequence(start, end).toString();
        int radix = isHex ? 16 : 10;
        entityValue = Integer.parseInt(entityStr, radix);
    } catch (NumberFormatException nfe) {
        return 0;
    }
    return entityValue;
}