public static long parseOctal(byte[] buffer, int offset, int length) {
    long result = 0;
    int end = offset + length;
    int start = offset;

    if (length < 2) {
        throw new IllegalArgumentException("Length " + length + " must be at least 2");
    }

    if (buffer[start] != 0) {
        // Skip leading spaces
        while (start < end) {
            if (buffer[start] == ' ') {
                start++;
            } else {
                break;
            }
        }

        // Must have trailing NUL or space
        byte trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' ') {
            end--;
        } else {
            throw new IllegalArgumentException(
                    exceptionMessage(buffer, offset, length, end-1, trailer));
        }

        // May have additional NUL or space
        trailer = buffer[end-1];
        if (trailer == 0 || trailer == ' ') {
            end--;
        }

        for (; start < end; start++) {
            byte currentByte = buffer[start];
            // CheckStyle:MagicNumber OFF
            if (currentByte < '0' || currentByte > '7') {
                throw new IllegalArgumentException(
                        exceptionMessage(buffer, offset, length, start, currentByte));
            }
            result = (result << 3) + (currentByte - '0'); // convert from ASCII
            // CheckStyle:MagicNumber ON
        }
    }

    return result;
}