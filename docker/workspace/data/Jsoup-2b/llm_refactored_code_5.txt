private void parseStartTag() {
    tq.consume("<");
    String tagName = tq.consumeWord();

    if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
        tq.addFirst("&lt;");
        parseTextNode();
        return;
    }

    Attributes attributes = new Attributes();
    while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {
        Attribute attribute = parseAttribute();
        if (attribute != null)
            attributes.put(attribute);
    }

    Tag tag = Tag.valueOf(tagName);
    Element child = new Element(tag, baseUri, attributes);

    boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
    if (tq.matchChomp("/>")) { // close empty element or tag
        isEmptyElement = true;
    } else {
        tq.matchChomp(">");
    }
    addChildToParent(child, isEmptyElement);

    if (tag.isData()) {
        String data = tq.chompTo("</" + tagName);
        tq.chompTo(">");
        popStackToClose(tag);

        Node dataNode;
        if (tag.equals(titleTag) || tag.equals(textareaTag)) {
            dataNode = new DataNode(data, baseUri);
        } else {
            dataNode = new DataNode(data);
        }

        String normalizedName = tag.normalName();
        if (!TextUtils.isBlank(normalizedName)) {
            handleRawtext(dataNode, normalizedName);
        }

        child.appendChild(dataNode);
    }

    if (child.tagName().equals("base")) {
        String href = child.absUrl("href");
        if (href.length() != 0) {
            baseUri = href;
            doc.setBaseUri(href);
        }
    }
}