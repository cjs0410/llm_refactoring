static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {

    boolean lastWasWhite = false;
    boolean reachedNonWhite = false;
    final EscapeMode escapeMode = out.escapeMode();
    final CharsetEncoder encoder = out.encoder();
    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
    final Map<Character, String> map = escapeMode.getMap();
    final int length = string.length();

    int codePoint;
    int offset = 0;
    while (offset < length) {
        codePoint = string.codePointAt(offset);
        offset += Character.charCount(codePoint);

        if (normaliseWhite) {
            if (StringUtil.isWhitespace(codePoint)) {
                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                    continue;
                accum.append(' ');
                lastWasWhite = true;
                continue;
            } else {
                lastWasWhite = false;
                reachedNonWhite = true;
            }
        }

        // html specific and required escapes:
        switch (codePoint) {
            case '&':
                accum.append("&amp;");
                break;
            case 0xA0:
                if (escapeMode != EscapeMode.xhtml)
                    accum.append("&nbsp;");
                else
                    accum.append("&#xa0;");
                break;
            case '<':
                // escape when in character data or when in a xml attribue val; not needed in html attr val
                if ((!inAttribute || escapeMode == EscapeMode.xhtml) && escapeMode != EscapeMode.base)
                    accum.append("&lt;");
                else
                    accum.append(Character.toChars(codePoint));
                break;
            case '>':
                if ((!inAttribute || escapeMode == EscapeMode.xhtml) && escapeMode != EscapeMode.base)
                    accum.append("&gt;");
                else
                    accum.append(Character.toChars(codePoint));
                break;
            case '"':
                if (inAttribute)
                    accum.append("&quot;");
                else
                    accum.append(Character.toChars(codePoint));
                break;
            default:
                final char c = Character.toChars(codePoint)[0];
                if (canEncode(coreCharset, c, encoder))
                    accum.append(c);
                else if (map.containsKey(c))
                    accum.append('&').append(map.get(c)).append(';');
                else
                    accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
        }
    }
}