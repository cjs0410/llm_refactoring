Map<String, String> parsePaxHeaders(InputStream i) throws IOException {
    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
    
    while (true) {
        int ch = i.read();
        if (ch == -1) { // EOF
            break;
        }
        
        int len = 0;
        int read = 0;
        
        while (true) {
            read++;
            
            if (ch == '\n') { // blank line in header
                break;
            } else if (ch == ' ') { // End of length string
                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                
                while (true) {
                    read++;
                    if (ch == '=') { // end of keyword
                        final String keyword = coll.toString(CharsetNames.UTF_8);
                        final int restLen = len - read;
                        
                        if (restLen == 1) { // only NL
                            headers.remove(keyword);
                        } else {
                            final byte[] rest = new byte[restLen];
                            final int got = IOUtils.readFully(i, rest);
                            
                            if (got != restLen) {
                                throw new IOException("Failed to read Paxheader. Expected "
                                                      + restLen + " bytes, read " + got);
                            }
                            
                            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                            headers.put(keyword, value);
                        }
                        
                        break;
                    }
                    coll.write((byte) ch);
                    ch = i.read();
                }
                break; // Processed single header
            }
            
            len *= 10;
            len += ch - '0';
            ch = i.read();
        }
    }
    
    return headers;
}