Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
    // Format is "length keyword=value\n";
    while (true) { // get length
        int ch;
        int len = 0;
        while ((ch = i.read()) != -1) {
            if (ch == '\n') { // blank line in header
                break;
            } else if (ch == ' ') { // End of length string
                // Get keyword
                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                while ((ch = i.read()) != -1 && ch != '\n') {
                    coll.write(ch);
                }
                String keyword = coll.toString(CharsetNames.UTF_8);
                // Get rest of entry
                int restLen = len - coll.size() - 1;
                if (restLen == 1) { // only NL
                    headers.remove(keyword);
                } else {
                    byte[] rest = new byte[restLen];
                    int got = IOUtils.readFully(i, rest);
                    if (got != restLen) {
                        throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
                    }
                    // Drop trailing NL
                    String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                    headers.put(keyword, value);
                }
                break; // Processed single header
            }
            len *= 10;
            len += ch - '0';
        }
        if (ch == -1) { // EOF
            break;
        }
    }
    return headers;
}